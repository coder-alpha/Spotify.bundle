import sys
import os
import inspect
# import text

PREFIX = '/music/spotify'

def basePath():
  thisScript = inspect.stack()[0][1]
  index = thisScript.rfind('.bundle')
  basePath = thisScript[:index+7]
  return basePath

def check_dirs():
  dataPath = os.path.join(basePath(), 'data')
  if not os.path.exists(dataPath):
      os.makedirs(dataPath)
  sp_cache_dir = os.path.join(dataPath, 'libspotify','cache')
  sp_settings_dir = os.path.join(dataPath, 'libspotify','settings')
  if not os.path.exists(sp_cache_dir):
      os.makedirs(sp_cache_dir)
  if not os.path.exists(sp_settings_dir):
      os.makedirs(sp_settings_dir)
  return (dataPath, sp_cache_dir, sp_settings_dir)


def load_libspotify():
  architecture = Platform.CPU
  platform = Platform.OS
  Log.Debug('Server Platform (%s %s)' % (architecture,platform))
  DLL_DIRS = {
      (OS.LINUX, Architecture.X86) : ["Contents/Libraries/dlls/linux/x86"],
      (OS.LINUX, Architecture.X86_64) : ["Contents/Libraries/dlls/linux/x86_64"],
      (OS.LINUX, Architecture.ARM) : ["Contents/Libraries/dlls/linux/armv6","Libraries/dlls/linux/armv6hf"],
      # (OS.LINUX, Architecture.ARM_64) : ["Contents/Libraries/dlls/linux/aarch64"],
      (OS.WINDOWS, Architecture.X86) : ["Contents/Libraries/dlls/windows/x86"],
      (OS.WINDOWS, Architecture.X86_64) : ["Contents/Libraries/dlls/windows/x86"],
      (OS.OSX, Architecture.X86) : ["Contents/Libraries/dlls/osx"],		
      (OS.OSX, Architecture.X86_64) : ["Contents/Libraries/dlls/osx"],
      (OS.ANDROID, Architecture.ARM) : ["Contents/Libraries/dlls/android/arm"],
      (OS.ANDROID, Architecture.X86) : ["Contents/Libraries/dlls/android/arm"],
      (OS.ANDROID, Architecture.X86_64) : ["Contents/Libraries/dlls/android/arm"],
      # (OS.ANDROID, Architecture.ARM_64) : ["Contents/Libraries/dlls/android/arm"],
      (OS.IOS, Architecture.ARM) : ["Contents/Libraries/dlls/ios"],
      (OS.IOS, Architecture.X86) : ["Contents/Libraries/dlls/ios"]        
      }
  
  dirs_to_include = DLL_DIRS.get((platform, architecture)) 
  if dirs_to_include is None or len(dirs_to_include) == 0:
    raise OSError('This platform is not supported (%s %s)' % (architecture, platform))
  add_library_paths(dirs_to_include)

def add_library_paths(paths):
  for path in paths:
      add_library_path(path)

def add_library_path(path):
  full_path = os.path.join(basePath(), path)
  sys.path.append(full_path)

def try_decode(text, encoding="utf-8"):
    try:
        return text.decode(encoding,"ignore")
    except:
        return text  

appkey = [0x01, 0x35, 0x5E, 0x93, 0xA8, 0x82, 0x39, 0x15, 0x8E, 0x77, 0xD1, 0x52, 0xD2, 0x8C, 0xCE, 0xCD,
  0x38, 0x88, 0xB3, 0x48, 0xED, 0x5E, 0x73, 0xD2, 0xF0, 0xFF, 0x82, 0x46, 0x18, 0xBB, 0x3C, 0x06,
  0x23, 0x94, 0xE6, 0xE0, 0x7B, 0x36, 0xE9, 0x03, 0xBE, 0xA7, 0x2A, 0x07, 0xDD, 0x57, 0xBC, 0x85,
  0xC3, 0x20, 0x2C, 0x79, 0xB8, 0x13, 0xCB, 0xC1, 0xB4, 0xE7, 0x29, 0xC0, 0xF8, 0x85, 0x44, 0x37,
  0xD4, 0xD1, 0xF4, 0x58, 0xD5, 0xF6, 0x5C, 0xA5, 0x63, 0xF2, 0x9B, 0x1B, 0xCE, 0xF3, 0xE4, 0xD1,
  0xB2, 0xDD, 0x6F, 0x11, 0xC4, 0x52, 0x51, 0xEB, 0x6C, 0xEB, 0xCF, 0x2C, 0x2C, 0x1C, 0x46, 0xB0,
  0xA4, 0xD8, 0x10, 0x4B, 0xA1, 0x2F, 0xD5, 0x1A, 0x43, 0x84, 0xFF, 0x52, 0x9D, 0xB7, 0x21, 0x9F,
  0xDA, 0x9F, 0x7B, 0xDA, 0xB6, 0xAF, 0xC7, 0xD7, 0x7E, 0xE7, 0x1E, 0xD0, 0x0A, 0xB5, 0x10, 0x6F,
  0x61, 0x63, 0x4D, 0x89, 0xE7, 0x58, 0x64, 0x50, 0xB5, 0x02, 0x03, 0xF8, 0x9B, 0xE4, 0xEF, 0x88,
  0xEE, 0xC4, 0x89, 0x36, 0xED, 0x4A, 0xA1, 0x76, 0x1B, 0x67, 0x45, 0x39, 0x96, 0xAD, 0x7A, 0xB0,
  0x82, 0xB0, 0x02, 0x25, 0x45, 0x74, 0x8D, 0x8F, 0xCF, 0xEB, 0xCA, 0x8D, 0x1A, 0xB0, 0xD0, 0xAF,
  0x07, 0x47, 0x18, 0xEC, 0xB7, 0x77, 0xCD, 0xF0, 0x7A, 0xB9, 0x21, 0xCA, 0xFF, 0x0F, 0xDE, 0x3F,
  0x33, 0x43, 0xF8, 0x5D, 0x08, 0xA7, 0x4E, 0xF4, 0xD1, 0x40, 0x8F, 0x1C, 0x84, 0xAE, 0x60, 0x33,
  0x4C, 0x24, 0x9F, 0x0A, 0x59, 0x12, 0xEF, 0xDC, 0x2A, 0x1B, 0x03, 0xF1, 0xB3, 0x43, 0x06, 0x14,
  0x12, 0x9D, 0x17, 0xD8, 0x2C, 0x30, 0x5B, 0x0D, 0xA0, 0x3D, 0x23, 0x50, 0xE5, 0x39, 0x22, 0x99,
  0x1A, 0x93, 0x59, 0x17, 0x1A, 0x3D, 0xD8, 0x33, 0xFC, 0xF8, 0x43, 0x0C, 0x80, 0xFB, 0xBE, 0xDF,
  0xFB, 0x9B, 0x6C, 0xCD, 0xD3, 0x8F, 0x78, 0xE9, 0x99, 0xC3, 0x4E, 0xFB, 0xBA, 0xD8, 0x76, 0xED,
  0x09, 0xE1, 0xC5, 0xC8, 0x6D, 0x25, 0xF1, 0x23, 0x28, 0x5B, 0xA2, 0x83, 0x12, 0x02, 0xC7, 0x27,
  0xEF, 0x7A, 0x24, 0x10, 0x6C, 0x8C, 0x77, 0xB5, 0xD7, 0x37, 0x60, 0xFC, 0x43, 0x32, 0xC2, 0x30,
  0xB3, 0x8E, 0x19, 0x58, 0xF7, 0x68, 0x9C, 0xAB, 0xF9, 0x4C, 0xEA, 0xA9, 0xBD, 0x08, 0x28, 0x41,
  0x4C,]

class OS:
    ANDROID = 'Android'
    LINUX = 'Linux'
    WINDOWS = 'Windows'
    OSX = 'MacOSX'
    IOS = 'MacIOS'
  
    @staticmethod
    def all_platforms():
        return [getattr(OS, attr) for attr in vars(OS) 
            if not callable(getattr(OS, attr)) and not attr.startswith("__")]
  
class Architecture:
    X86 = "i386"
    X86_64 = "x86_64"
    ARM = "armv5tel"
    MIPS = "MIPS"
    MIPS_64 = "mips64"
